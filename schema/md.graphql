"Represents a schema"
schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

type TargetConnection {
  id: ID
  artifact: Artifact
  target: Target
  createdAt: DateTime
  updatedAt: DateTime
}

type ValidationOption {
  "The name of a variable to be subsituted in a validation message template"
  key: String!

  "The value of a variable to be substituted in a validation message template"
  value: String!
}

"A link between two manifests in an architecture"
type ArchitectureLink {
  "The role in the architecture to link to"
  role: String!

  "The field to link to on the upstream (dependee) manifest."
  srcField: String!

  "The field to link to on this manifest."
  destField: String!
}

type DnsZone {
  id: ID
  name: String
  cloud: String
  location: String
  cloudProviderId: String
}

enum AlarmState {
  OK
  ALARM
  INSUFFICIENT_DATA
}

type TargetPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Target
}

type InvitationPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Invitation
}

type ArtifactPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Artifact
}

"A template of a manifest to with a specific role in the architecture."
type ArchitectureManifest {
  "The role of this manifest in the architecture."
  role: String!

  bundle: Bundle

  "Manifests this is linked to."
  links: [ArchitectureLink]
}

type OrganizationPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Organization
}

type DeploymentPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Deployment
}

type ApiKeyPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: ApiKey
}

"Represents an uploaded file."
scalar Upload

type PackageAlert {
  notification: JSON
  occurredAt: String
  providerResourceId: String
  displayName: String
  state: Boolean @deprecated(reason: "This field will be removed after cutover to the new package alert format")
  packageAlertState: PackageAlertState
}

"Field that an artifact can be linked to on this manifest."
type LinkableField {
  name: String!
  artifactDefinition: ArtifactDefinition!
}

type LocationList {
  locations: [String]
}

"Supported download formats"
type ArtifactDefinitionExportFormat {
  downloadButtonText: String!
  fileFormat: String!
  template: String!
  templateLang: String!
}

type Account {
  id: ID!

  email: String!

  betaAccessEnabled: Boolean! @deprecated(reason: "Removing the beta block feature")

  attribution: String

  createdAt: DateTime!

  updatedAt: DateTime!

  "Account's avatar"
  avatar: Avatar

  "Temporary Account token for GraphQL Subscriptions"
  token: String

  pendingInvitations: [PendingInvitation]

  "Organizations you are a member of"
  organizations: [Organization]
}

"Container Repository filters"
input ContainerRepositoryFilters {
  "The cloud in which to filter by"
  cloud: String
}

"Artifact filters"
input ArtifactsFilters {
  "The artifact definition type to filter by"
  type: String

  origin: ArtifactOrigin
}

type PackageDeletionLifecycleArtifactError {
  artifact: Artifact!
  message: String!
}

type ManifestDeletionLifecyclePackageError {
  package: Package!
  message: String!
}

type Membership {
  groupId: String
}

type RootSubscriptionType {
  deploymentProgress(organizationId: ID!, packageId: ID!): ProvisioningLifecycleEvents
  packageAlerts(organizationId: ID!, packageId: ID!): PackageAlert
}

type Session {
  url: String!
}

type ApiKey {
  id: ID!
  name: String!
  active: Boolean!
  secret: String!
}

type ManifestResource {
  "Manifest name"
  name: String

  package: Package

  manifest: Manifest

  artifacts: [Artifact]

  deployments: [Deployment]
}

type ArtifactResource {
  "Artifact name"
  name: String

  "Artifact type"
  type: String

  id: String

  artifactId: String

  origin: String

  sourceTargetId: String

  sourceProjectId: String
}

type PackageDeletionLifecycle {
  result: Boolean!
  messages: [PackageDeletionLifecycleArtifactError]
}

type Package {
  id: ID!

  namePrefix: String!

  "Package configuration parameters"
  params: JSON!

  status: PackageStatus!

  createdAt: DateTime!

  updatedAt: DateTime!

  activeDeployment: Deployment

  "Checks if this package can be decommissioned."
  decommissionable: PackageDeletionLifecycle!

  manifest: Manifest!

  paramsSchema: JSON!

  providerResources: [ProviderResource]

  "The environment this package will be deployed to"
  environment: Environment!

  deployments: [Deployment]

  connections: [Connection]

  "Artifacts provisioned by this package"
  artifacts: [Artifact]

  "Current alarms for this package"
  packageAlerts: [PackageAlert]
}

type ArtifactDeletionLifecycle {
  result: Boolean!
  messages: [ArtifactDeletionLifecycleArtifactError]
}

type Bundle {
  id: ID!

  "The short name of the bundle"
  name: String!

  "Application or bundle"
  type: String!

  "Public or private"
  access: String!

  description: String

  ref: String

  paramsSchema: String

  connectionsSchema: String

  artifactsSchema: String

  uiSchema: String

  createdAt: DateTime!

  updatedAt: DateTime!

  "The full name of the bundle"
  fqn: String!
}

input ArtifactsInput {
  filter: ArtifactsFilters
}

type ContainerRepositoryPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: ContainerRepository
}

type PackagePayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Package
}

type Deployment {
  id: ID!

  status: String!

  action: String!

  "Errors encountered during deployment"
  errors: [DeploymentError]

  package: Package!

  artifacts: [Artifact]

  deployedBy: String

  createdAt: DateTime!

  updatedAt: DateTime!

  lastTransitionedAt: DateTime

  "Elapsed time in second"
  elapsedTime: Int!
}

type Changeset {
  change: JSON
}

type Artifact {
  id: ID!

  name: String!

  type: String!

  data: JSON

  specs: JSON

  packageId: ID @deprecated(reason: "Use package{id} instead")

  "The type of artifact"
  artifactDefinition: ArtifactDefinition!

  "The package that provisioned this artifact"
  package: Package

  "Connections to packages"
  connections: [Connection]

  "Environments this package is a default in"
  targetConnections: [TargetConnection]

  "How the artifact was created, manually imported or provisioned by Massdriver"
  origin: ArtifactOrigin

  "Check to see if the artifact can be deleted."
  deletable: ArtifactDeletionLifecycle!

  createdAt: DateTime!

  updatedAt: DateTime!
}

"Artifact definition filters"
input ArtifactDefinitionFilters {
  "The service for which to get compatible artifact definitions"
  service: String
}

type TargetDeletionLifecyclePackageError {
  package: Package!
  message: String!
}

type ArtifactDeletionLifecycleArtifactError {
  message: String!
}

"Artifact definitions that can be set as an environment default (TargetConnection)"
type DefaultableTargetConnectionGroup {
  "UI Label for group"
  name: String

  artifactDefinitions: [ArtifactDefinition]
}

enum ArtifactOrigin {
  IMPORTED
  PROVISIONED
}

type BillingSubscription {
  id: ID!
  providerCustomerId: String!
  providerPaymentStatus: String!
  subscriptionPlan: SubscriptionPlan
}

"""
The `JSON` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar JSON

type RootMutationType {
  "Upload an avatar for an account."
  uploadAvatar(image: Upload!): AvatarPayload

  "Creates an API key"
  createApiKey(organizationId: ID!, name: String!): ApiKeyPayload

  deleteApiKey(organizationId: ID!, id: ID!): ApiKeyPayload

  deactivateApiKey(organizationId: ID!, id: ID!): ApiKeyPayload

  reactivateApiKey(organizationId: ID!, id: ID!): ApiKeyPayload

  "Create an artifact"
  createArtifact(organizationId: ID!, name: String!, type: String!, specs: JSON!, data: JSON!): ArtifactPayload

  """
  Delete an artifact.

  Artifacts cannot be deleted if provisioned by Massdriver.
  """
  deleteArtifact(organizationId: ID!, id: ID!): ArtifactPayload

  createBillingSubscription(organizationId: ID!, planId: ID!): BillingSubscriptionPayload

  createContainerRepository(organizationId: ID!, name: String!, location: String!, artifactId: ID!, cloud: String!): ContainerRepositoryPayload

  disconnectContainerRepository(organizationId: ID!, id: ID!): ContainerRepositoryPayload

  connectContainerRepository(
    organizationId: ID!, name: String!, location: String!, cloudProviderId: String!, cloud: String!
  ): ContainerRepositoryPayload

  "Enqueues a package for deployment"
  deployPackage(organizationId: ID!, targetId: ID!, manifestId: ID!): DeploymentPayload

  "Enqueues a package for decommissioning"
  decommissionPackage(organizationId: ID!, targetId: ID!, manifestId: ID!): DeploymentPayload

  "Links two manifests"
  linkManifests(
    organizationId: ID!, srcManifestId: ID!, srcManifestField: String!, destManifestId: ID!, destManifestField: String!
  ): LinkPayload

  unlinkManifests(organizationId: ID!, linkId: ID!): LinkPayload

  createDnsZone(organizationId: ID!, name: String!, location: String!, artifactId: ID!, cloud: String!): DnsZonePayload

  connectDnsZone(organizationId: ID!, name: String!, location: String!, cloudProviderId: String!, cloud: String!): DnsZonePayload

  disconnectDnsZone(organizationId: ID!, id: ID!): DnsZonePayload

  "Adds a bundle to a project"
  createManifest(organizationId: ID!, bundleId: ID!, projectId: ID!, name: String!, slug: String!, description: String): ManifestPayload

  "Update a manifest"
  updateManifest(organizationId: ID!, id: ID!, name: String!, description: String): ManifestPayload

  "Removes a manifest from a project. This will fail if infrastructure is still provisioned in an environment."
  deleteManifest(organizationId: ID!, id: ID!): ManifestPayload

  "Create an organization"
  createOrganization(name: String!, slug: String!): OrganizationPayload

  "Update a Package's parameters"
  configurePackage(organizationId: ID!, manifestId: ID!, targetId: ID!, params: JSON!): PackagePayload

  "Create a project"
  createProject(organizationId: ID!, name: String!, description: String, slug: String!): ProjectPayload

  "Update a project"
  updateProject(organizationId: ID!, id: ID!, name: String!, description: String): ProjectPayload

  deleteProject(organizationId: ID!, id: ID!): ProjectPayload

  "Connect an artifact as the default artifact type for a given environment"
  createTargetConnection(organizationId: ID!, artifactId: ID!, targetId: ID!): TargetConnectionPayload

  """
  Disconnect an artifact as the default artifact type for a given environment.

  This is a potentially dangerous/destructive action.

  For example, changing the default VPC will cause all resources to be deleted and recreated in the new VPC.
  """
  deleteTargetConnection(organizationId: ID!, id: ID!): TargetConnectionPayload

  "Create an environment"
  createTarget(organizationId: ID!, projectId: ID!, name: String!, slug: String!, description: String): TargetPayload

  "Update an environment"
  updateTarget(organizationId: ID!, id: ID!, name: String!, description: String): TargetPayload

  "Removes an environment from a project. This will fail if infrastructure is still provisioned in the environment."
  deleteTarget(organizationId: ID!, id: ID!): TargetPayload

  "Invites a user"
  inviteMemberToOrganization(email: String!, groupId: ID!, organizationId: ID!): InvitationPayload

  "Allows users to accept invitations"
  acceptInvitation(invitationId: ID!): MembershipPayload

  "Create a stripe subscription management session"
  createSubscriptionManagementSession(organizationId: ID!): SessionPayload
}

type Diagram {
  links: [Link]
  resources: [Resource]
}

type RootQueryType {
  me: Account

  apiKeys(organizationId: ID!): [ApiKey]

  architectures(organizationId: ID!): [Architecture]

  "Filter artifacts by an artifact definition type."
  filterArtifactsByType(organizationId: ID!, type: String!): [Artifact] @deprecated(reason: "Use artifacts query w\/ artifacts filters instead.")

  "Get an artifact by ID"
  artifact(organizationId: ID!, id: ID!): Artifact

  "List all artifacts"
  artifacts(
    organizationId: ID!

    "Search, filter, and sort inputs"
    input: ArtifactsInput
  ): [Artifact]

  "Connection data for an artifact rendered in requested format"
  downloadArtifact(organizationId: ID!, artifactId: ID!, format: DownloadFormat!): RenderedArtifact

  artifactDefinitions(
    "List all artifact definitions"
    organizationId: ID!

    "Filter artifact definition results"
    input: ArtifactDefinitionInput
  ): [ArtifactDefinition]

  defaultableTargetConnectionGroups(
    "List defaultable environment connections by group"
    organizationId: ID!
  ): [DefaultableTargetConnectionGroup]

  containerRepositoryCredentialArtifactDefinitions(
    "List artifact definitions which can be used to provision and connect container repositories"
    organizationId: ID!
  ): [ArtifactDefinition]

  compareTargets(organizationId: ID!, fromTargetId: ID!, toTargetId: ID!): Changeset

  compareDeployments(organizationId: ID!, fromDeploymentId: ID!, toDeploymentId: ID!): Changeset

  billingSubscription(organizationId: ID!): BillingSubscription

  bundles(organizationId: ID!): [Bundle]

  containerRepositories(
    organizationId: ID!

    "Filter Container Repository results"
    input: ContainerRepositoryInput
  ): [ContainerRepository]

  cloudContainerRepositories(organizationId: ID!, location: String!, artifactId: ID!): [ContainerRepository]

  deployments(organizationId: ID!, manifestId: ID!, targetId: ID!): [Deployment]

  dnsZones(
    organizationId: ID!

    "Filter DNS Zone results"
    input: DnsZoneInput
  ): [DnsZone]

  cloudDnsZones(organizationId: ID!, location: String!, artifactId: ID!): [DnsZone]

  "Gets supported regions for cloud services"
  supportedLocations(organizationId: ID!, cloudService: String!): LocationList

  manifest(
    organizationId: ID!

    "Manifest ID or slug"
    id: ID!
  ): Manifest

  package(organizationId: ID!, manifestId: ID!, targetId: ID!): Package

  projects(organizationId: ID!): [Project]

  project(
    organizationId: ID!

    "Project ID or slug"
    id: ID!
  ): Project

  target(
    organizationId: ID!

    "Environment ID or slug"
    id: ID!
  ): Target

  "gets all groups for an organization"
  groups(organizationId: ID!): [Group]

  subscriptionPlans: [SubscriptionPlan]
}

type ProviderResource {
  id: ID!

  "Name the provisioner refers to this resource by"
  provisionerResourceName: String!

  "Internal set ID for collections"
  provisionerResourceKey: String

  "Cloud provider resource ID"
  providerResourceId: String!

  "Provisioner resource type. E.g.: terraform `aws_s3_bucket`, kubernetes `apps\/v1\/Deployment`"
  provisionerResourceType: String!

  createdAt: DateTime!

  updatedAt: DateTime!
}

"""
Validation messages are returned when mutation input does not meet the requirements.
  While client-side validation is highly recommended to provide the best User Experience,
  All inputs will always be validated server-side.

  Some examples of validations are:

  * Username must be at least 10 characters
  * Email field does not contain an email address
  * Birth Date is required

  While GraphQL has support for required values, mutation data fields are always
  set to optional in our API. This allows 'required field' messages
  to be returned in the same manner as other validations. The only exceptions
  are id fields, which may be required to perform updates or deletes.
"""
type ValidationMessage {
  """
  The input field that the error applies to. The field can be used to
  identify which field the error message should be displayed next to in the
  presentation layer.

  If there are multiple errors to display for a field, multiple validation
  messages will be in the result.

  This field may be null in cases where an error cannot be applied to a specific field.
  """
  field: String

  """
  A friendly error message, appropriate for display to the end user.

  The message is interpolated to include the appropriate variables.

  Example: `Username must be at least 10 characters`

  This message may change without notice, so we do not recommend you match against the text.
  Instead, use the *code* field for matching.
  """
  message: String

  "A unique error code for the type of validation used."
  code: String!

  """
  A template used to generate the error message, with placeholders for option substiution.

  Example: `Username must be at least {count} characters`

  This message may change without notice, so we do not recommend you match against the text.
  Instead, use the *code* field for matching.
  """
  template: String

  "A list of substitutions to be applied to a validation message template"
  options: [ValidationOption]
}

type PackageAlertState {
  status: AlarmState!
  message: String
  notification: JSON
  occurredAt: String
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

type ManifestDeletionLifecycle {
  result: Boolean!
  messages: [ManifestDeletionLifecyclePackageError]
}

"Artifact and manifest nodes"
union Resource = ManifestResource | ArtifactResource

type Project {
  id: ID
  name: String
  description: String
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  organization: Organization
  targets: [Target]
  manifests: [Manifest]
  deletable: ProjectDeletionLifecycle!
}

type SessionPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Session
}

type MembershipPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Membership
}

type Manifest {
  id: ID!
  name: String!
  slug: String!
  suffix: String!
  description: String
  deletable: ManifestDeletionLifecycle!
  createdAt: DateTime!
  updatedAt: DateTime!
  bundle: Bundle!
  packages: [Package]
  linkableFields: [LinkableField]
}

type AvatarPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Avatar
}

type TargetConnectionPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: TargetConnection
}

type ManifestPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Manifest
}

"Artifact definition filters"
input ArtifactDefinitionInput {
  filter: ArtifactDefinitionFilters
}

type LinkPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Link
}

type DeploymentLifecycleEvent {
  id: ID!
  status: String!
  deployment: Deployment!
}

"Deployment and resource lifecycle events"
union ProvisioningLifecycleEvents = DeploymentLifecycleEvent | ResourceLifecycleEvent

"DNS Zone filters"
input DnsZoneFilters {
  "The cloud in which to filter by"
  cloud: String
}

enum PackageStatus {
  INITIALIZED
  PROVISIONED
  DECOMMISSIONED
  FAILED
}

type ProjectDeletionLifecyclePackageError {
  package: Package!
  message: String!
  target: Target
}

type Invitation {
  id: ID
}

type ArtifactDefinition {
  id: ID
  name: String
  url: String
  type: String @deprecated(reason: "use `name` field")
  schema: String
  exportFormats: [ArtifactDefinitionExportFormat]
  fqn: String! @deprecated(reason: "use `name` field")
}

type PendingInvitation {
  id: ID!
  group: Group
}

type SubscriptionPlan {
  id: ID!
  name: String!
  providerProductId: String!
  providerPriceId: String!
  price: Int!
  planLimits: PlanLimit!
  attribution: String!
}

type Organization {
  id: ID
  name: String
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Connection {
  id: ID
  packageField: String
  artifact: Artifact
  package: Package
  createdAt: DateTime
  updatedAt: DateTime
}

type Link {
  id: String!
  srcField: String!
  destField: String!
  isConnection: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  srcManifest: Manifest!
  destManifest: Manifest!
}

type ContainerRepository {
  id: ID
  name: String
  cloud: String
  location: String
  cloudProviderId: String
}

type TargetDeletionLifecycle {
  result: Boolean!
  messages: [TargetDeletionLifecyclePackageError]
}

type ProjectDeletionLifecycle {
  result: Boolean!
  messages: [ProjectDeletionLifecyclePackageError]
}

type Architecture {
  id: ID!

  type: String!

  name: String!

  "The manifests and links to build this architecture."
  blueprint: [ArchitectureManifest]
}

type Target {
  id: ID

  name: String

  slug: String

  description: String

  deletable: TargetDeletionLifecycle!

  createdAt: DateTime

  updatedAt: DateTime

  "Environment's diagram links and resources"
  diagram: Diagram

  "Manifests for this environment's package"
  manifests: [Manifest]

  project: Project

  packages: [Package]

  connections: [TargetConnection]
}

"DNS Zone filters"
input DnsZoneInput {
  filter: DnsZoneFilters
}

"Container Repository filters"
input ContainerRepositoryInput {
  filter: ContainerRepositoryFilters
}

type PlanLimit {
  maxMembers: Int!
  maxCloudAccounts: Int!
  maxTargets: Int!
  maxArtifactDefinitions: Int!
  maxPublicBundles: Int!
  maxPrivateBundles: Int!
}

type ProjectPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Project
}

type DnsZonePayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: DnsZone
}

type BillingSubscriptionPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: BillingSubscription
}

"supported file formats for artifacts"
enum DownloadFormat {
  RAW
  YAML
}

type RenderedArtifact {
  renderedArtifact: String!
}

type ResourceLifecycleEvent {
  "Provider resource type"
  type: String!

  "Internal resource name"
  name: String!

  key: String

  status: String!

  action: String!
}

type Member {
  email: String
}

type Avatar {
  thumbnailUrl: String!
  originalUrl: String!
}

"Error encountered during provisioning or decommissioning"
type DeploymentError {
  "Brief overview of error"
  message: JSON

  "Additional details of error"
  details: JSON
}

type Group {
  id: ID
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  members: [Member]
  invited: [Member]
}
